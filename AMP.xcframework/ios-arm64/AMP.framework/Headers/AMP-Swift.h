// Generated by Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
#ifndef AMP_SWIFT_H
#define AMP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AMP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIWindow;
enum AmpEnvironment : NSInteger;
enum AmpRatingsStatus : NSInteger;
enum AmpRatingsResult : NSInteger;
enum AmpLoginRequirement : NSInteger;

/// AMP is the application management platform used for applications distributed
/// by the GEOINT App Store.
/// note:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
SWIFT_CLASS_NAMED("Amp")
@interface Amp : NSObject
/// Starts AMP’s authentication and validates application. This must be placed in
/// your AppDelegate’s application:didFinishLaunchingWithOptions: override.
/// This method will authenticate a user with the GEOINT App Store.
/// It will also verify that the user is allowed to use the application and
/// manage things like ratings prompts and subscription renewals.
/// \code
/// // Swift Example:
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///    window = UIWindow(frame: UIScreen.main.bounds)
///    Amp.start(with: window, environment: AmpEnvironment.TESTING, signature: "testing") {
///        let storyboard = UIStoryboard(name: "Main", bundle: Bundle.main)
///        let vc: ViewController = storyboard.instantiateInitialViewController() as! ViewController
///        self.window?.rootViewController = vc
///    }
///    return true
/// }
///
/// // Objective-C Example:
/// - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
///    self.window = [[UIWindow alloc] initWithFrame:UIScreen.mainScreen.bounds];
///    [Amp startWith:self.window environment:AmpEnvironmentTESTING signature:@"testing" completion:^{
///        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:NSBundle.mainBundle];
///        ViewController *viewController = [storyboard instantiateInitialViewController];
///        [self.window setRootViewController:viewController];
///    }];
///    return YES;
/// }
///
/// \endcodenote:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
/// \param window An initialized UIWindow created in your UIApplicationDelegate.
///
/// \param environment This determines which server AMP should use. Use the
/// “TESTING” environment to simulate server calls.
///
/// \param signature This string validates your app with the selected server.
/// Use any non-nil string for testing purposes.
///
/// \param completion This completion block will be called after AMP has finished
/// its processes. Use this block to segue into whichever View Controller you
/// wish to start the application with.
///
+ (void)startWith:(UIWindow * _Nullable)window environment:(enum AmpEnvironment)environment signature:(NSString * _Nonnull)signature completion:(void (^ _Nonnull)(void))completion;
/// This enables AMP to use GEOAxIS Website OAuth for authentication. This must be placed in
/// your AppDelegate’s application:openUrl:options: override.
/// \code
/// // Swift Example:
/// func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
///     return Amp.oauthStart(url)
/// }
///
/// // Objective-C Example:
/// - (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
///     return [Amp oauthStart:url];
/// }
///
/// \endcodenote:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
/// \param url The URL to open
///
+ (BOOL)oauthStart:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// This will tell you if the user has a rating for your product.
/// note:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
///
/// returns:
/// This will be:
/// <ul>
///   <li>
///     NONE if the user has no ratings for this product
///   </li>
///   <li>
///     NEW if  they have a rating for this version
///   </li>
///   <li>
///     OLD if they have a rating for a different version of this product.
///   </li>
/// </ul>
+ (enum AmpRatingsStatus)getRatingsStatus SWIFT_WARN_UNUSED_RESULT;
/// Display a ratings prompt.
/// You will be responsible for handling and remembering the user’s action.
/// The ratings prompt allows the user to leave a
/// rating/review for your product which will appear in the
/// GEOINT App Store for your product. You should handle the resulting
/// AmpRatingsResult accordingly.
/// Please note that we provide a getRatingsStatus method which will tell you if
/// the user has a rating for your product. If they do, we will tell you whether the
/// rating is for the currently running version of the product or for an older version.
/// If the user submits a rating, we suggest not prompting them again unless you have
/// released a major update to your application.
/// If the user dismisses the prompt, you may want to prompt them on next use
/// or wait a certain amount of usages before prompting again.
/// If the user chooses the “Never Show Again” option,
/// we expect you to remember this and never prompt the user again (unless you
/// have released a major update to your application).
/// note:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
/// \param completion This completion block is called after the user has finished
/// using the ratings prompt. The completion block will be passed the ratings result.
///
+ (void)displayRatingsPrompt:(void (^ _Nonnull)(enum AmpRatingsResult))completion;
/// Set the number of times a user should use your app before being
/// prompted for a rating/review. We will handle the user’s action.  This must be set
/// before calling the Amp start method.
/// We will display the ratings prompt for you. The user must open your
/// app for the set amount of usages you provide here, and they will be prompted
/// for a rating on the next relaunch. We keep track of these usages for you, and
/// we will handle whatever action the user takes. We will not display a ratings
/// prompt to the user if they already have a rating in our App Store for your product.
/// note:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
/// \param usages The number of times a user must use the application before a ratings prompt.
///
+ (void)setUsagesBeforeRatingsPrompt:(NSInteger)usages;
/// Get the device ID that the GEOINT App Store has associated with the device.
/// note:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
+ (NSString * _Nullable)getDeviceId SWIFT_WARN_UNUSED_RESULT;
/// Get the login ID that the GEOINT App Store has associated with the user.
/// note:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
+ (NSString * _Nullable)getLoginId SWIFT_WARN_UNUSED_RESULT;
/// Get the usage count used for rating prompt
/// note:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
+ (NSInteger)getUsageCount SWIFT_WARN_UNUSED_RESULT;
/// Get the version number and build number from the CFBundleShortVersionString and CFBundleVersion values of the AMP bundle info dictionary
/// note:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
+ (NSString * _Nonnull)getVersionNumber SWIFT_WARN_UNUSED_RESULT;
/// Checks to see if the network connection is available to the GAS API
/// note:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
+ (BOOL)isNetworkAvailable SWIFT_WARN_UNUSED_RESULT;
/// <em>FOR ADMIN USE  ONLY</em>
/// Determines how often a user should be required to login.  This must be set
/// before calling the Amp start method.
/// \code
/// // Example:
/// Amp.setLoginRequirement(.ALWAYS)
///
/// \endcodenote:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
/// \param loginRequirement How often a user should be required to login.
///
+ (void)setLoginRequirement:(enum AmpLoginRequirement)loginRequirement;
/// <em>FOR ADMIN USE  ONLY</em>
/// Determines how often a user should be required to login.
/// \code
/// // Example:
/// Amp.getLoginRequirement()
///
/// \endcodenote:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
+ (enum AmpLoginRequirement)getLoginRequirement SWIFT_WARN_UNUSED_RESULT;
/// <em>FOR ADMIN USE  ONLY</em>
/// Should users be able to use a License Key (provided by Device Officers) instead of a GAS account.  This must be set
/// before calling the Amp start method.
/// \code
/// // Example:
/// Amp.setAllowLicenseKeys(true)
///
/// \endcodenote:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
/// \param shouldAllowLicenseKeys Should users be able to use a License Key (provided by Device Officers) instead of a GAS account.
///
+ (void)setAllowLicenseKeys:(BOOL)shouldAllowLicenseKeys;
/// <em>FOR ADMIN USE  ONLY</em>
/// Should users be able to use a License Key (provided by Device Officers) instead of a GAS account.
/// \code
/// // Example:
/// Amp.getAllowLicenseKeys()
///
/// \endcodenote:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
+ (BOOL)getAllowLicenseKeys SWIFT_WARN_UNUSED_RESULT;
/// <em>FOR ADMIN USE  ONLY</em>
/// This will clear the AMP keychain, the LastLogin keychain and the local defaults
/// \code
/// // Example:
/// Amp.reset()
///
/// \endcodenote:
/// For questions related to the usage of this library, please contact the GEOINT App Store Team via
/// email at <a href="mailto:geoint.appstoreteam@nga.mil">geoint.appstoreteam@nga.mil</a> or visit the contact page at <a href="https://apps.nga.mil">https://apps.nga.mil</a>
/// author:
/// Rob Hoffmann
+ (void)reset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This determines the environment AMP should use.
typedef SWIFT_ENUM(NSInteger, AmpEnvironment, open) {
/// This environment will simulate network calls, but will not actually
/// connect to the GEOINT App Store’s servers.
  AmpEnvironmentTESTING = 0,
/// This is the NGA staging environment for the GEOINT App Store.
  AmpEnvironmentNGA_STAGE = 1,
/// This is the IGAPP testing environment for the GEOINT App Store.
  AmpEnvironmentNGA_IGAPP = 2,
/// This is the production environment for the GEOINT App Store.
  AmpEnvironmentNGA_PRODUCTION = 3,
/// This is the CTI testing environment for GEOINT App Store developers.
  AmpEnvironmentCTI_DMZ = 4,
/// This is the AZURE testing envrionment for GEOINT App Store developers.
  AmpEnvironmentAZURE_TEST = 5,
};

/// This determines how often a user must login.
typedef SWIFT_ENUM(NSInteger, AmpLoginRequirement, open) {
/// This is the default value. Authentication is only required one time.
  AmpLoginRequirementONCE = 0,
/// Authentication is required every time the application is launched.
  AmpLoginRequirementALWAYS = 1,
};

/// This is the result of a user’s action in a ratings prompt.
typedef SWIFT_ENUM(NSInteger, AmpRatingsResult, open) {
/// The user has successfully submitted a rating to the GEOINT App Store.
  AmpRatingsResultSUBMITTED = 0,
/// The user has dismissed the ratings prompt without leaving a rating.
  AmpRatingsResultDISMISSED = 1,
/// The user never wants to see this ratings prompt again.
  AmpRatingsResultNEVER_DISPLAY_AGAIN = 2,
};

/// This tells you if the user has a rating for your product in the GEOINT App Store.
typedef SWIFT_ENUM(NSInteger, AmpRatingsStatus, open) {
/// The user has no rating for your product.
  AmpRatingsStatusNONE = 0,
/// The user has a rating for this version of your product.
  AmpRatingsStatusNEW = 1,
/// The user has a rating for a different version of this product.
  AmpRatingsStatusOLD = 2,
};





















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
